# Welcome to your prefect.yaml file! You can use this file for storing and managing
# configuration for deploying your flows. We recommend committing this file to source
# control along with your flow code.

# Generic metadata about this project
name:

# build section allows you to manage and build docker images
build:
  - prefect.deployments.steps.run_shell_script:
      id: show-env-vars
      script: printenv
      stream_output: true
  - prefect_docker.deployments.steps.build_docker_image:
      id: build-image
      requires: prefect-docker>=0.3.1
      dockerfile: images/flow_runner/Dockerfile
      image_name: "{{ $GCP_DEFAULT_REGION }}-docker.pkg.dev/{{ $GCP_PROJECT_ID }}/prefect-{{ $ENV }}/prefect"
      tag: "{{ $PREFECT_VERSION }}-python{{ $PYTHON_VERSION }}"
      buildargs:
        GCP_PROJECT_ID: "{{ $GCP_PROJECT_ID }}"
        PYTHON_VERSION: "{{ $PYTHON_VERSION }}"
        PREFECT_VERSION: "{{ $PREFECT_VERSION }}"

# push section allows you to manage if and how this project is uploaded to remote locations
push:
  - prefect_docker.deployments.steps.push_docker_image:
      requires: prefect-docker>=0.3.1
      image_name: "{{ build-image.image_name }}"
      tag: "{{ build-image.tag }}"

# pull section allows you to provide instructions for cloning this project in remote locations
pull:
  - prefect.deployments.steps.set_working_directory:
      directory: "/opt/prefect/{{ $GCP_PROJECT_ID }}"

# @see https://docs.prefect.io/2.13.7/guides/prefect-deploy/?h=prefect.yaml#reusing-configuration-across-deployments
definitions:
  work_pools:
    gcr_push_work_pool: &gcr_push_work_pool_dev
      name: aviation-data-warehouse-gcr-push-work-pool-dev
      work_queue_name:
      job_variables:
        image: "{{ build-image.image }}"
    gcr_push_work_pool_test: &gcr_push_work_pool_test
      name: aviation-data-warehouse-gcr-push-work-pool-test
      work_queue_name:
      job_variables:
        image: "{{ build-image.image }}"
    gcr_push_work_pool_prod: &gcr_push_work_pool_prod
      name: aviation-data-warehouse-gcr-push-work-pool-prod
      work_queue_name:
      job_variables:
        image: "{{ build-image.image }}"

# the deployments section allows you to provide configuration for deploying flows
deployments:
  # Dev Environment
  - name: EL-flightradar24-flights-dev
    version:
    tags: []
    description: Extract Flights from Flightrader24 API and load them into a GCS Bucket
    schedule:
    entrypoint: src/prefect/flows/EL_flightradar24_flights.py:extract_load_flightradar24_flights
    parameters: {}
    work_pool: *gcr_push_work_pool_dev

  - name: EL-flightradar24-airports-dev
    version:
    tags: []
    description: Extract Airports from Flightrader24 API and load them into a GCS Bucket
    schedule:
    entrypoint: src/prefect/flows/EL_flightradar24_airports.py:extract_load_flightradar24_airports
    parameters: {}
    work_pool: *gcr_push_work_pool_dev


  # Test Environment
  - name: EL-flightradar24-flights-test
    version:
    tags: []
    description: Extract Flights from Flightrader24 API and load them into a GCS Bucket
    schedule:
    entrypoint: src/prefect/flows/EL_flightradar24_flights.py:extract_load_flightradar24_flights
    parameters: {}
    work_pool: *gcr_push_work_pool_test

  - name: EL-flightradar24-airports-test
    version:
    tags: []
    description: Extract Airports from Flightrader24 API and load them into a GCS Bucket
    schedule:
    entrypoint: src/prefect/flows/EL_flightradar24_airports.py:extract_load_flightradar24_airports
    parameters: {}
    work_pool: *gcr_push_work_pool_test


  # Prod Environment
  - name: EL-flightradar24-flights-prod
    version:
    tags: []
    description: Extract Flights from Flightrader24 API and load them into a GCS Bucket
    schedule:
      cron: "*/30 * * * *" # every N min
      timezone: "Europe/Berlin"
    entrypoint: src/prefect/flows/EL_flightradar24_flights.py:extract_load_flightradar24_flights
    parameters: {}
    work_pool: *gcr_push_work_pool_prod

  - name: EL-flightradar24-airports-prod
    version:
    tags: []
    description: Extract Airports from Flightrader24 API and load them into a GCS Bucket
    schedule:
      cron: "0 2 * * *" # every day, 2 AM
      timezone: "Europe/Berlin"
    entrypoint: src/prefect/flows/EL_flightradar24_airports.py:extract_load_flightradar24_airports
    parameters: {}
    work_pool: *gcr_push_work_pool_prod